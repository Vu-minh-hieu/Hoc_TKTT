#BlueJ class context
comment0.target=BellmanFordSD
comment0.text=\r\n\ \ %\ java\ BellmanFordSD\ "tinyEWDn.txt",\ "0"\r\n\ \ 0\ to\ 0\ (\ 0.00)\ \ \r\n\ \ \ \ 1\ to\ 0\ (-0.59)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ 1->3\ \ 0,29\ \ \ \r\n\ \ \ \ 2\ to\ 0\ (-0.15)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ 7->3\ \ 0,39\ \ \ 2->7\ \ 0,34\ \ \ \r\n\ \ \ \ 3\ to\ 0\ (-0.88)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ \r\n\ \ \ \ 4\ to\ 0\ (-0.12)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ 7->3\ \ 0,39\ \ \ 4->7\ \ 0,37\ \ \ \r\n\ \ \ \ 5\ to\ 0\ (-0.27)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ 1->3\ \ 0,29\ \ \ 5->1\ \ 0,32\ \ \ \r\n\ \ \ \ 6\ to\ 0\ (-1.40)\ \ 6->0\ -1,40\ \ \ \r\n\ \ \ \ 7\ to\ 0\ (-0.49)\ \ 6->0\ -1,40\ \ \ 3->6\ \ 0,52\ \ \ 7->3\ \ 0,39\ \ \ \ \r\n\r\n\ \ %\ java\ BellmanFordSD\ "tinyEWDnc.txt",\ "0"\r\n\ \ 4->5\ \ 0.35\r\n\ \ 5->4\ -0.66\r\n\r\n\r\n
comment1.params=G\ s
comment1.target=BellmanFordSD(ReverseEdgeWeightedDigraph,\ int)
comment1.text=\r\n\ Computes\ a\ shortest\ paths\ tree\ from\ {@code\ s}\ to\ every\ other\ vertex\ in\r\n\ the\ edge-weighted\ digraph\ {@code\ G}.\r\n\ @param\ G\ the\ acyclic\ digraph\r\n\ @param\ s\ the\ source\ vertex\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n
comment10.params=v
comment10.target=void\ validateVertex(int)
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ Unit\ tests\ the\ {@code\ BellmanFordSD}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=G\ v
comment2.target=void\ relax(ReverseEdgeWeightedDigraph,\ int)
comment3.params=
comment3.target=boolean\ hasNegativeCycle()
comment3.text=\r\n\ Is\ there\ a\ negative\ cycle\ reachable\ from\ the\ source\ vertex\ {@code\ s}?\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ negative\ cycle\ reachable\ from\ the\r\n\ \ \ \ source\ vertex\ {@code\ s},\ and\ {@code\ false}\ otherwise\r\n
comment4.params=
comment4.target=java.lang.Iterable\ negativeCycle()
comment4.text=\r\n\ Returns\ a\ negative\ cycle\ reachable\ from\ the\ source\ vertex\ {@code\ s},\ or\ {@code\ null}\r\n\ if\ there\ is\ no\ such\ cycle.\r\n\ @return\ a\ negative\ cycle\ reachable\ from\ the\ soruce\ vertex\ {@code\ s}\ \r\n\ \ \ \ as\ an\ iterable\ of\ edges,\ and\ {@code\ null}\ if\ there\ is\ no\ such\ cycle\r\n
comment5.params=
comment5.target=void\ findNegativeCycle()
comment6.params=v
comment6.target=double\ distFrom(int)
comment6.text=\r\n\ Returns\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v};\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ no\ such\ path\r\n\ @throws\ UnsupportedOperationException\ if\ there\ is\ a\ negative\ cost\ cycle\ reachable\r\n\ \ \ \ \ \ \ \ \ from\ the\ source\ vertex\ {@code\ s}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment7.params=v
comment7.target=boolean\ hasPathFrom(int)
comment7.text=\r\n\ Is\ there\ a\ path\ from\ the\ source\ {@code\ s}\ to\ vertex\ {@code\ v}?\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\r\n\ \ \ \ \ \ \ \ \ {@code\ s}\ to\ vertex\ {@code\ v},\ and\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment8.params=v
comment8.target=java.lang.Iterable\ pathFrom(int)
comment8.text=\r\n\ Returns\ a\ shortest\ path\ from\ the\ source\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ a\ shortest\ path\ from\ the\ source\ {@code\ s}\ to\ vertex\ {@code\ v}\r\n\ \ \ \ \ \ \ \ \ as\ an\ iterable\ of\ edges,\ and\ {@code\ null}\ if\ no\ such\ path\r\n\ @throws\ UnsupportedOperationException\ if\ there\ is\ a\ negative\ cost\ cycle\ reachable\r\n\ \ \ \ \ \ \ \ \ from\ the\ source\ vertex\ {@code\ s}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment9.params=G\ s
comment9.target=boolean\ check(ReverseEdgeWeightedDigraph,\ int)
numComments=12
