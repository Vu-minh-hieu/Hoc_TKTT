#BlueJ class context
comment0.target=BellmanFordSP
comment0.text=\r\n\ \ The\ {@code\ BellmanFordSP}\ class\ represents\ a\ data\ type\ for\ solving\ the\r\n\ \ single-source\ shortest\ paths\ problem\ in\ edge-weighted\ digraphs\ with\r\n\ \ no\ negative\ cycles.\ \r\n\ \ The\ edge\ weights\ can\ be\ positive,\ negative,\ or\ zero.\r\n\ \ This\ class\ finds\ either\ a\ shortest\ path\ from\ the\ source\ vertex\ <em>s</em>\r\n\ \ to\ every\ other\ vertex\ or\ a\ negative\ cycle\ reachable\ from\ the\ source\ vertex.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ the\ Bellman-Ford-Moore\ algorithm.\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>V</em>\ (<em>V</em>\ +\ <em>E</em>)\r\n\ \ in\ the\ worst\ case,\ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\ <em>E</em>\r\n\ \ is\ the\ number\ of\ edges.\r\n\ \ Afterwards,\ the\ {@code\ distTo()},\ {@code\ hasPathTo()},\ and\ {@code\ hasNegativeCycle()}\r\n\ \ methods\ take\ constant\ time;\ the\ {@code\ pathTo()}\ and\ {@code\ negativeCycle()}\r\n\ \ method\ takes\ time\ proportional\ to\ the\ number\ of\ edges\ returned.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ \ \ \ \r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/44sp">Section\ 4.4</a>\ of\ \ \ \ \r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\ \r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=boolean\ hasNegativeCycle()
comment1.text=\r\n\ Is\ there\ a\ negative\ cycle\ reachable\ from\ the\ source\ vertex\ {@code\ s}?\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ negative\ cycle\ reachable\ from\ the\r\n\ \ \ \ source\ vertex\ {@code\ s},\ and\ {@code\ false}\ otherwise\r\n
comment2.params=
comment2.target=void\ findNegativeCycle()
comment3.params=v
comment3.target=double\ distTo(int)
comment3.text=\r\n\ Returns\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v};\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ no\ such\ path\r\n\ @throws\ UnsupportedOperationException\ if\ there\ is\ a\ negative\ cost\ cycle\ reachable\r\n\ \ \ \ \ \ \ \ \ from\ the\ source\ vertex\ {@code\ s}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment4.params=v
comment4.target=boolean\ hasPathTo(int)
comment4.text=\r\n\ Is\ there\ a\ path\ from\ the\ source\ {@code\ s}\ to\ vertex\ {@code\ v}?\r\n\ @param\ \ v\ the\ destination\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\r\n\ \ \ \ \ \ \ \ \ {@code\ s}\ to\ vertex\ {@code\ v},\ and\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment5.params=v
comment5.target=void\ validateVertex(int)
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment6.text=\r\n\ Unit\ tests\ the\ {@code\ BellmanFordSP}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=7
